ybenjello021@u1-111-6 : 12/14/21
                                       _           _              
  _____  ____ _ _ __ ___   ___ _ __   | |_ _ __   | |_ __ _  __ _ 
 / _ \ \/ / _` | '_ ` _ \ / _ \ '_ \  | __| '_ \  | __/ _` |/ _` |
|  __/>  < (_| | | | | | |  __/ | | | | |_| |_) | | || (_| | (_| |
 \___/_/\_\__,_|_| |_| |_|\___|_| |_|  \__| .__/   \__\__,_|\__, |
                                          |_|               |___/ 
 ---
 travail personnel: requis       utilisation du compte: libre
 commandes réseaux: interdites   permission HOMEDIR   : drwx------
 
 Repondre aux questions directement dans l'enonce en utilisant des 
 lignes de moins de 72 caracteres. Pour les sources, utiliser les noms 
 de fichiers precises dans l'enonce. Les sources ne doivent pas contenir
 de commentaires, ni de codes inutiles. Tous les programmes, fichiers 
 etc... devront etre places dans le repertoire d'examen :
 
            /etudiants/ybenjello021/exam-tp-I51-2021-ybenjello021

Vous validerez votre travail par la commande :   

            /home/partage/pl/validexam -mI51

 ---


Conformément à l'usage, on note n(G) le nombre de sommets du graphe G,
m(G) le nombre de ses arêtes et p(G) le nombre de composantes connexes. 

On rappelle qu'un cycle dans un graphe non orienté est un chemin fermé 
simple, c'est-à-dire ne passant pas deux fois par une même arête.  En 
particulier, un cycle est de longueur > 2. 


========================================================================
0. Répondre aux questions suivantes
========================================================================
[ P0 ] Un graphe sans cycle est dit acyclique. Connaissez vous une autre
terminologie ?

	OUI, LAQUELLE : Si le graphe est connexe en plus d'acyclique, le graphe est 
                  un arbre

[ P1 ] Un graphe connexe est un arbre si et seulement n(G) = m(G) + 1

	VRAI
  
[ P2 ] Un graphe possede un cycle si et seulement si une de ces
      composantes connexes n'est pas un arbre.

	VRAI  

[ P3 ] Un graphe est acyclique si et seulement si n(G) = m(G) + p(G)
		
	VRAI  


========================================================================
1. statistiques sur les composantes connexes : fichier -> connexe.{ch}
========================================================================

[a]  Dans le fichier connexe.c, coder une fonction void stats( graphe g ) 
qui liste les statistiques sur les composantes connexes du graphe g : 
pour chaque composante, il s'agit d'afficher : un numéro de classe, un 
élément de la composante (numéro de sommet), la taille de la composante  
et le nombres de ses arêtes. 

L'affichage prendra la forme d'un tableau à 4 colonnes.
		
[b] Comment décider de l'existence d'un cycle dans un graphe sur la
base des statistiques de ses composantes connexes ? 

Un cycle existe si et seulement si m(G) > n(G) - p(G)

[c] Coder une fonction int cycle( graphe g ) qui renvoie le numéro d'un 
sommet représentant une composante connexe contenant un cycle. Dans le cas 
d'un graphe acyclique, la valeur de retour doit être  -1.



========================================================================
FUSION( G : graphe )
debut
	n := ordre( G )
	initialiser une structure de n ensembles disjoints
	pour chaque arete uv de G
		si representant( u ) != representant( v ) alors
			reunion( u, v );
			// 
                sinon
			// 
                fsi 
	fin
fin 
======= algorithme fondé sur la structure d'ensembles disjoints ========

========================================================================
2. Détection de cycle  : fichiers requis -> disjoint.{ch} detection.c
========================================================================


[a]  Expliquer commment l'algorithme FUSION( G ) peut être utilisé pour 
détecter la présence  d'un cycle dans le graphe G. 

L'algorithme de fusion construit en realite un arbre, on peut detecter
l'existence d'un cycle si le test
(si representant( u ) != representant( v ) alors)
echoue a n'importe quel moment c'est a dire est rep(u) == rep(v)


[b] Coder une fonction int detect( int *i, int*j, graphe g ) qui renvoie
1 si le graphe posssède un cycle, 0 sinon. Les arguments i et j, seront
utilisés pour passer les extrémités d'une arête de cycle.

[c] Préciser le temps de calcul dans le meilleur des cas.
Notons sing le cout de production d'un sinleton
Supposons que la function rep soit en O(n*log(n)) et reunion O(1)
Dans le meilleur des cas on trouve le cycle au troisieme tour de boucle
car un cycle est defini ainsi alors
Dans le meilleur des cas theta(n*sing + 3*(O(n*log(n))))

[d] Préciser le temps de calcul dans le pire des cas.
Dans le pire des cas il n'existe pas de cycle alors
Dans le meilleur des cas theta(n*sing + m*(O(n*log(n))))

[e] Utliser valgrind pour justifier l'absence de fuite mémoire.


========================================================================
3. backtracking sur l'échiquier  : fichiers requis -> varan.c 
========================================================================

	Un virus venu d'Indonésie a produit quelques mutations sur les 
pièces du jeu d'échecs. Le varan est une pièce  mutante qui se déplace 
comme un cavalier et une tour. Pour un échiquier nxn, on note V(n) le
nombre de configurations de n varans sans conrôle mutuel.


[a] Combien de cases sont controlées par un varan dans un coin ?

[b] Et au centre d'un échiquier nxn ?

[c] Coder une source varan.c pour une commande varan.exe qui prend un 
entier sur la ligne de commande pour déterminer et afficher la valeur 
de V(n).

[d] Préciser les valeurs de V(n) pour 1 <= n <= 8.
V(1) = 1
V(2) = 2
V(3) = 2
V(4) = 8
V(5) = 20
V(6) = 94
V(7) = 438
V(8) = 2766

[e] Une formule pour V(n) ?



========================================================================
4. challenge numérique : fichiers requis -> komodo.c 
========================================================================

Il s'agit de coder une version optimisée pour le problème des varans.

[a] Coder une source komodo.c pour une commande komodo.exe qui prend un 
entier sur la ligne de commande pour déterminer et afficher la valeur 
de V(n). 

[b] Utiliser la commande /usr/bin/time pour comparer les performances
des commandes varan.exe et komodo.exe
Avec la compilation en -02 
/usr/bin/time ./komodo.exe 10 est 0.03
/usr/bin/time ./varan.exe 10 est 0.03

